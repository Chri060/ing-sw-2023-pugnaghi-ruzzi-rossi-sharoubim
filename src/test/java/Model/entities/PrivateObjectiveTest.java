package Model.entities;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import util.Config;

import java.util.ArrayList;

public class PrivateObjectiveTest {

    Shelf shelfOne;
    Shelf shelfTwo;
    Shelf shelfThree;
    ArrayList<Card> cards;

    /**
     * Construct a shelf and an array of cards used in the following test
     */
    @BeforeEach
    void setup() {
        Config.initialise(2);
        shelfOne = new Shelf();
        shelfTwo = new Shelf();
        shelfThree = new Shelf();
        cards = new ArrayList<>();
    }

    /**
     * Tests for the private objective one
     */
    @Test
    void PrivateObjectiveOne() {
        PrivateObjective privateObjective = new PrivateObjective(0);
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.PLANT, 2));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.FRAME, 7));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.FRAME, 8));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.BOOK, 5));
        cards.add(new Card(Card.Type.TROPHY, 6));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 8));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.GAME, 9));
        cards.add(new Card(Card.Type.BOOK, 7));
        cards.add(new Card(Card.Type.CAT, 9));
        cards.add(new Card(Card.Type.PLANT, 8));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.PLANT, 2));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 10));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.FRAME, 7));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.FRAME, 8));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.BOOK, 5));
        cards.add(new Card(Card.Type.TROPHY, 6));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 8));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.GAME, 9));
        cards.add(new Card(Card.Type.BOOK, 7));
        cards.add(new Card(Card.Type.CAT, 9));
        cards.add(new Card(Card.Type.PLANT, 8));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 9);

        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.CAT, 0));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.PLANT, 2));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.PLANT, 4));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 5));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.TROPHY, 6));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.GAME, 2));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.TROPHY, 9));
        cards.add(new Card(Card.Type.TROPHY, 7));
        cards.add(new Card(Card.Type.GAME, 9));
        cards.add(new Card(Card.Type.GAME, 8));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 1);
    }


    /**
     * Tests for the private objective two
     */
    @Test
    void PrivateObjectiveTwo() {
        PrivateObjective privateObjective = new PrivateObjective(1);
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.CAT, 2));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.FRAME, 4));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 5));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.BOOK, 6));
        cards.add(new Card(Card.Type.PLANT, 6));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.GAME, 7));
        cards.add(new Card(Card.Type.BOOK, 9));
        cards.add(new Card(Card.Type.GAME, 7));
        cards.add(new Card(Card.Type.GAME, 9));
        cards.add(new Card(Card.Type.GAME, 8));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.CAT, 2));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.BOOK, 16));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.FRAME, 4));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 5));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.BOOK, 6));
        cards.add(new Card(Card.Type.PLANT, 6));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 10));
        cards.add(new Card(Card.Type.GAME, 7));
        cards.add(new Card(Card.Type.BOOK, 9));
        cards.add(new Card(Card.Type.GAME, 7));
        cards.add(new Card(Card.Type.GAME, 9));
        cards.add(new Card(Card.Type.GAME, 8));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 6);

        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.FRAME, 16));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.BOOK, 17));
        cards.add(new Card(Card.Type.CAT, 2));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.BOOK, 16));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.FRAME, 4));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 5));
        cards.add(new Card(Card.Type.PLANT, 18));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.BOOK, 6));
        cards.add(new Card(Card.Type.PLANT, 6));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 10));
        cards.add(new Card(Card.Type.GAME, 7));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.GAME, 7));
        cards.add(new Card(Card.Type.GAME, 9));
        cards.add(new Card(Card.Type.GAME, 8));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 0);
    }

    /**
     * Tests for the private objective three
     */
    @Test
    void PrivateObjectiveThree() {
        PrivateObjective privateObjective = new PrivateObjective(2);
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.FRAME, 3));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.BOOK, 2));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.CAT, 4));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 7));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.FRAME, 8));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 9));
        cards.add(new Card(Card.Type.GAME, 7));
        cards.add(new Card(Card.Type.TROPHY, 9));
        cards.add(new Card(Card.Type.CAT, 7));
        cards.add(new Card(Card.Type.BOOK, 9));
        cards.add(new Card(Card.Type.PLANT, 8));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.PLANT, 15));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.CAT, 15));
        cards.add(new Card(Card.Type.FRAME, 3));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.FRAME, 16));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.BOOK, 2));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 18));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.CAT, 4));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 7));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.FRAME, 8));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 9));
        cards.add(new Card(Card.Type.GAME, 7));
        cards.add(new Card(Card.Type.TROPHY, 9));
        cards.add(new Card(Card.Type.CAT, 7));
        cards.add(new Card(Card.Type.BOOK, 9));
        cards.add(new Card(Card.Type.PLANT, 8));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 2);

        cards.add(new Card(Card.Type.BOOK, 19));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.FRAME, 15));
        cards.add(new Card(Card.Type.FRAME, 3));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.BOOK, 16));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.BOOK, 2));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 18));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.CAT, 4));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 7));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.FRAME, 8));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 9));
        cards.add(new Card(Card.Type.GAME, 7));
        cards.add(new Card(Card.Type.GAME, 9));
        cards.add(new Card(Card.Type.CAT, 7));
        cards.add(new Card(Card.Type.BOOK, 9));
        cards.add(new Card(Card.Type.PLANT, 8));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 4);
    }

    /**
     * Tests for the private objective four
     */
    @Test
    void PrivateObjectiveFour() {
        PrivateObjective privateObjective = new PrivateObjective(3);
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.FRAME, 0));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.CAT, 6));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.CAT, 5));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.CAT, 7));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.TROPHY, 6));
        cards.add(new Card(Card.Type.GAME, 8));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.FRAME, 7));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.CAT, 8));
        cards.add(new Card(Card.Type.TROPHY, 9));
        cards.add(new Card(Card.Type.GAME, 10));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.FRAME, 0));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.CAT, 6));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.CAT, 5));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.CAT, 7));
        cards.add(new Card(Card.Type.CAT, 20));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.TROPHY, 6));
        cards.add(new Card(Card.Type.GAME, 8));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.FRAME, 7));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.CAT, 8));
        cards.add(new Card(Card.Type.TROPHY, 9));
        cards.add(new Card(Card.Type.GAME, 10));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 9);

        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.BOOK, 20));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.FRAME, 0));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.PLANT, 20));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.PLANT, 17));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.BOOK, 13));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.CAT, 5));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.CAT, 7));
        cards.add(new Card(Card.Type.CAT, 17));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.TROPHY, 6));
        cards.add(new Card(Card.Type.GAME, 8));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.FRAME, 7));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.CAT, 8));
        cards.add(new Card(Card.Type.TROPHY, 9));
        cards.add(new Card(Card.Type.TROPHY, 10));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 0);
    }

    /**
     * Tests for the private objective five
     */
    @Test
    void PrivateObjectiveFive() {
        PrivateObjective privateObjective = new PrivateObjective(4);
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.FRAME, 0));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.BOOK, 6));
        cards.add(new Card(Card.Type.TROPHY, 8));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 9));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.CAT, 9));
        cards.add(new Card(Card.Type.GAME, 8));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.BOOK, 10));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.FRAME, 0));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.GAME, 12));
        cards.add(new Card(Card.Type.FRAME, 12));
        cards.add(new Card(Card.Type.BOOK, 12));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.BOOK, 6));
        cards.add(new Card(Card.Type.TROPHY, 8));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 9));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.CAT, 9));
        cards.add(new Card(Card.Type.GAME, 8));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.BOOK, 10));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 6);

        cards.add(new Card(Card.Type.CAT, 11));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.FRAME, 0));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.BOOK, 13));
        cards.add(new Card(Card.Type.FRAME, 12));
        cards.add(new Card(Card.Type.BOOK, 12));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.FRAME, 11));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 14));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.BOOK, 6));
        cards.add(new Card(Card.Type.TROPHY, 8));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 14));
        cards.add(new Card(Card.Type.CAT, 12));
        cards.add(new Card(Card.Type.CAT, 9));
        cards.add(new Card(Card.Type.GAME, 8));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.BOOK, 10));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 0);
    }

    /**
     * Tests for the private objective six
     */
    @Test
    void PrivateObjectiveSix() {
        PrivateObjective privateObjective = new PrivateObjective(5);
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.GAME, 0));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.TROPHY, 3));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.CAT, 6));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 7));
        cards.add(new Card(Card.Type.FRAME, 8));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.PLANT, 8));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.CAT, 9));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.GAME, 0));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.TROPHY, 3));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.CAT, 15));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.CAT, 6));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 7));
        cards.add(new Card(Card.Type.FRAME, 8));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.PLANT, 8));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.CAT, 9));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 9);

        cards.add(new Card(Card.Type.CAT, 10));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.GAME, 0));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.FRAME, 11));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.PLANT, 13));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.GAME, 14));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.CAT, 6));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 7));
        cards.add(new Card(Card.Type.FRAME, 8));
        cards.add(new Card(Card.Type.PLANT, 9));
        cards.add(new Card(Card.Type.PLANT, 8));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.BOOK, 19));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 1);
    }

    /**
     * Tests for the private objective seven
     */
    @Test
    void PrivateObjectiveSeven() {
        PrivateObjective privateObjective = new PrivateObjective(6);
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.CAT, 0));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.PLANT, 7));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.FRAME, 7));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.GAME, 5));
        cards.add(new Card(Card.Type.FRAME, 8));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.GAME, 6));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.PLANT, 10));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.GAME, 10));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.GAME, 12));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.PLANT, 7));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.FRAME, 7));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.GAME, 5));
        cards.add(new Card(Card.Type.FRAME, 8));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.GAME, 6));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 4);

        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.CAT, 10));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.CAT, 0));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.CAT, 12));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.PLANT, 7));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.FRAME, 5));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.BOOK, 16));
        cards.add(new Card(Card.Type.FRAME, 7));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.FRAME, 15));
        cards.add(new Card(Card.Type.FRAME, 8));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.GAME, 6));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 2);
    }

    /**
     * Tests for the private objective eight
     */
    @Test
    void PrivateObjectiveEight() {
        PrivateObjective privateObjective = new PrivateObjective(7);
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.GAME, 0));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.TROPHY, 5));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.GAME, 5));
        cards.add(new Card(Card.Type.TROPHY, 6));
        cards.add(new Card(Card.Type.BOOK, 5));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.TROPHY, 7));
        cards.add(new Card(Card.Type.CAT, 6));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.PLANT, 8));
        cards.add(new Card(Card.Type.FRAME, 6));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.GAME, 0));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.GAME, 14));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.TROPHY, 5));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.TROPHY, 10));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.GAME, 5));
        cards.add(new Card(Card.Type.TROPHY, 6));
        cards.add(new Card(Card.Type.BOOK, 5));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.TROPHY, 7));
        cards.add(new Card(Card.Type.CAT, 6));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.PLANT, 8));
        cards.add(new Card(Card.Type.FRAME, 6));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 6);

        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.GAME, 10));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.CAT, 1));
        cards.add(new Card(Card.Type.GAME, 0));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.PLANT, 12));
        cards.add(new Card(Card.Type.PLANT, 3));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.CAT, 14));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.TROPHY, 5));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 16));
        cards.add(new Card(Card.Type.FRAME, 15));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.GAME, 5));
        cards.add(new Card(Card.Type.TROPHY, 6));
        cards.add(new Card(Card.Type.BOOK, 5));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.TROPHY, 7));
        cards.add(new Card(Card.Type.CAT, 6));
        cards.add(new Card(Card.Type.PLANT, 7));
        cards.add(new Card(Card.Type.PLANT, 8));
        cards.add(new Card(Card.Type.CAT, 19));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 0);
    }

    /**
     * Tests for the private objective nine
     */
    @Test
    void PrivateObjectiveNine() {
        PrivateObjective privateObjective = new PrivateObjective(8);
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.PLANT, 0));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.CAT, 1));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.GAME, 1));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.BOOK, 4));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.TROPHY, 10));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.PLANT, 0));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.FRAME, 12));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.CAT, 1));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.TROPHY, 14));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.GAME, 1));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.PLANT, 5));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.BOOK, 4));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 4);

        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.PLANT, 0));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.FRAME, 12));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.CAT, 1));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.GAME, 14));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.CAT, 11));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.BOOK, 15));
        cards.add(new Card(Card.Type.PLANT, 20));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.BOOK, 4));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 1);
    }

    /**
     * Tests for the private objective ten
     */
    @Test
    void PrivateObjectiveTen() {
        PrivateObjective privateObjective = new PrivateObjective(9);
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.GAME, 0));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.TROPHY, 2));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.CAT, 1));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.TROPHY, 5));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.GAME, 0));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.TROPHY, 2));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.GAME, 12));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.CAT, 1));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.FRAME, 13));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.PLANT, 14));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.TROPHY, 5));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 9);

        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.GAME, 10));
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.GAME, 0));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.PLANT, 13));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.CAT, 11));
        cards.add(new Card(Card.Type.TROPHY, 2));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.GAME, 3));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.CAT, 1));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 17));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.BOOK, 4));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.BOOK, 19));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 1);
    }

    /**
     * Tests for the private objective eleven
     */
    @Test
    void PrivateObjectiveEleven() {
        PrivateObjective privateObjective = new PrivateObjective(10);
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.GAME, 2));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.PLANT, 5));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.FRAME, 4));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.CAT, 6));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.FRAME, 5));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 11));
        cards.add(new Card(Card.Type.GAME, 2));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.FRAME, 2));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.PLANT, 5));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.FRAME, 4));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.TROPHY, 16));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.FRAME, 5));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 6);

        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        cards.add(new Card(Card.Type.BOOK, 10));
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.CAT, 0));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.TROPHY, 1));
        cards.add(new Card(Card.Type.FRAME, 1));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.GAME, 2));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.CAT, 2));
        cards.add(new Card(Card.Type.CAT, 12));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.FRAME, 15));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 15));
        cards.add(new Card(Card.Type.GAME, 4));
        cards.add(new Card(Card.Type.CAT, 3));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.FRAME, 4));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 4));
        cards.add(new Card(Card.Type.CAT, 6));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.TROPHY, 4));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.FRAME, 5));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 2);
    }

    /**
     * Tests for the private objective twelve
     */
    @Test
    void PrivateObjectiveTwelve() {
        PrivateObjective privateObjective = new PrivateObjective(11);
        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        shelfOne.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.PLANT, 2));
        cards.add(new Card(Card.Type.CAT, 2));
        shelfOne.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.BOOK, 5));
        shelfOne.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.GAME, 4));
        shelfOne.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 5));
        cards.add(new Card(Card.Type.GAME, 6));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.CAT, 7));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.FRAME, 8));
        shelfOne.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfOne).getValue() == 12);

        cards.add(new Card(Card.Type.CAT, 0));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        shelfTwo.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.TROPHY, 12));
        cards.add(new Card(Card.Type.CAT, 2));
        shelfTwo.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.FRAME, 4));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.FRAME, 15));
        shelfTwo.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.TROPHY, 3));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.GAME, 4));
        shelfTwo.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 5));
        cards.add(new Card(Card.Type.CAT, 16));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.CAT, 7));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.FRAME, 8));
        shelfTwo.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfTwo).getValue() == 4);

        cards.add(new Card(Card.Type.TROPHY, 10));
        cards.add(new Card(Card.Type.BOOK, 0));
        cards.add(new Card(Card.Type.GAME, 0));
        cards.add(new Card(Card.Type.PLANT, 0));
        cards.add(new Card(Card.Type.TROPHY, 0));
        cards.add(new Card(Card.Type.PLANT, 1));
        shelfThree.insert(cards, 0);
        cards.clear();
        cards.add(new Card(Card.Type.FRAME, 0));
        cards.add(new Card(Card.Type.BOOK, 1));
        cards.add(new Card(Card.Type.GAME, 1));
        cards.add(new Card(Card.Type.BOOK, 2));
        cards.add(new Card(Card.Type.GAME, 12));
        cards.add(new Card(Card.Type.CAT, 2));
        shelfThree.insert(cards, 1);
        cards.clear();
        cards.add(new Card(Card.Type.BOOK, 3));
        cards.add(new Card(Card.Type.GAME, 2));
        cards.add(new Card(Card.Type.PLANT, 3));
        cards.add(new Card(Card.Type.CAT, 14));
        cards.add(new Card(Card.Type.FRAME, 3));
        cards.add(new Card(Card.Type.FRAME, 15));
        shelfThree.insert(cards, 2);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 2));
        cards.add(new Card(Card.Type.CAT, 4));
        cards.add(new Card(Card.Type.GAME, 13));
        cards.add(new Card(Card.Type.PLANT, 4));
        cards.add(new Card(Card.Type.CAT, 5));
        cards.add(new Card(Card.Type.GAME, 4));
        shelfThree.insert(cards, 3);
        cards.clear();
        cards.add(new Card(Card.Type.TROPHY, 5));
        cards.add(new Card(Card.Type.CAT, 16));
        cards.add(new Card(Card.Type.FRAME, 6));
        cards.add(new Card(Card.Type.CAT, 7));
        cards.add(new Card(Card.Type.PLANT, 6));
        cards.add(new Card(Card.Type.FRAME, 8));
        shelfThree.insert(cards, 4);
        cards.clear();
        assert (privateObjective.getMaxPoints(shelfThree).getValue() == 0);
    }
}